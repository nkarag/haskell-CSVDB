============================
== IN PROGRESS
============================


<<<20170427		implement 
					* (DONE) GroupBy and (DONE) Aggregation
					* (DONE) upsertRtuple (wrapper over HashMap.insert), (DONE) singleton RTable
					* (DONE) Change the AggOperation data type from a sum type to a product type and implement the various agg operations as values of the product type.
					* (DONE) addSurrogateKey operation

					* Dedublicate and 
					* Merge operations 
				with Data.List groupby and nubby functions

============================
== OPEN (Not Started)
============================

<<<20170918		Make basic Data Types strict based on: https://www.fpcomplete.com/blog/2017/09/all-about-strictness

<<<20170609		Exploit SQL Parser: http://jakewheat.github.io/simple-sql-parser/latest/#simple-sql-parser
				in order to implement an SQL command line interface over CSVs

				Usage example:

				parseQueryExpr   SQL2011 "error.file" Nothing "Select * from tab1, tab2 where acol > bcol group by acol having count(*) > 2"


<<<20170427		Create a minimal set of COMMANDS that will be used in order to process CSV files either from a command line, or via a script in a file.
				We must be able to pattern match on these commands. Basically we need the following functions:

					parseCommand


					newtype Writer w a = Writer { runWriter :: (a, w) }

				instance Functor (Writer w) where
				  fmap f (Writer (a, w)) = Writer (f a, w)

				instance Monoid w => Applicative (Writer w) where
				  pure a = Writer (a, mempty)
				  Writer (f, w) <*> Writer (a, w') = Writer (f a, w `mappend` w')

				instance Monoid w => Monad (Writer w) where
				  return = pure
				  Writer (a, w) >>= f = let (b, w') = runWriter (f a)
				                        in Writer (b, w `mappend` w') :: Text -> Command -- Parse user input (Text) and transform it into a structured Command data type
					parsePredicate :: Text -> Predicate  -- Parse user input (Text) and transform it into a structured Predicate data type
															 -- a predicate is an expression of filter and/or join predicates connected by Logical Operations

					cmdToEtlMap :: Command -> ETLMapping  -- Transform the Command to an ETLMapping that is ready to be executed and yield final result (an RTable)

				Also we will need basic Input / Output functions for the corresponding input/output commands like the following:

					importCSV :: Command -> RTable
					listCSV :: RTable  -> IO()
					exportCSV :: RTable -> IO()


<<<20170421		Check SQL parser at: http://jakewheat.github.io/simple-sql-parser/latest/

============================
== COMPLETED
============================
<<<<20171113	implement printRTable :: RTable -> IO() 
20171117>>> (Completion)

<<<20171027		Create a new git branch ("RTabResult") and implement a new data type that will return the number of RTuples returned from the execution of an operation (e.g. ETL Mapping)
				type RTabResult = Writer Numrows RTable
				type Numrows = Int

				Alternative A
				-------------------
				https://stackoverflow.com/questions/33881822/understanding-example-on-writer-monad 

				newtype Writer w a = Writer { runWriter :: (a, w) }

				instance Functor (Writer w) where
				  fmap f (Writer (a, w)) = Writer (f a, w)

				instance Monoid w => Applicative (Writer w) where
				  pure a = Writer (a, mempty)
				  Writer (f, w) <*> Writer (a, w') = Writer (f a, w `mappend` w')

				instance Monoid w => Monad (Writer w) where
				  return = pure
				  Writer (a, w) >>= f = let (b, w') = runWriter (f a)
				                        in Writer (b, w `mappend` w')
				
				Alternative B
				-------------
			    :m + Control.Monad.Trans.Writer.Strict
				(transformers-0.5.5.0)  https://hackage.haskell.org/package/transformers-0.5.5.0/docs/Control-Monad-Trans-Writer-Strict.html

				-- stack install transformers-0.5.2.0
				-- :m + Control.Monad.Trans.Writer.Lazy  (https://hackage.haskell.org/package/transformers-0.5.2.0/docs/Control-Monad-Trans-Writer-Lazy.html#v:writer)

				-- type NumRows = Int
				:m + Data.Monoid
				type NumRows = Sum Int
				
				-- RTabResult will be a Writer Monad:
				type RTabResult = Writer NumRows RTable

				> let tab1 = Data.Vector.fromList [Data.HashMap.Strict.fromList [("col1", "val1"),("col2", "val2")], Data.HashMap.Strict.fromList [("col1", "val3"),("col2", "val4")]] :: RTable

				-- create an RTabResult
				> let res1 = writer (tab1, 2) :: RTabResult

				-- Get the info in the Writer Monad (RTabResult)
				nikos-ghci> runWriter res1
				([fromList [("col2","val2"),("col1","val1")],fromList [("col2","val4"),("col1","val3")]],2)


				-- Get only the log message (num of rows) from the RTabResult 
				nikos-ghci> execWriter res1				
				2


				-- Example of RTabResult composition
				nikos-ghci> select :: RTable -> RTabResult ; select t = writer (Data.Vector.take 1 t, (Sum (1::Int)))
				nikos-ghci> :t select
				select :: RTable -> RTabResult


				nikos-ghci> join :: RTable -> RTable -> RTabResult ; join t1 t2 = writer (t1 Data.Vector.++ t2 , Sum ((Data.Vector.length t1 + Data.Vector.length t2)::Int))
				nikos-ghci> :t join
				join :: RTable -> RTable -> RTabResult				

				nikos-ghci> result = do {r1 <- select tab1 ; join r1 tab1}
				nikos-ghci> runWriter result

				([fromList [("col2","val2"),("col1","val1")],fromList [("col2","val2"),("col1","val1")],fromList [("col2","val4"),("col1","val3")]],Sum {getSum = 4})

				The getSum = 4 is due to 1 + (1+2), where 1 is from the select operation and 1+2 = 3 is from the addition of the vector's lenghts in the join operation.

				-----------------------------------------

				then you must change all functions doing operations on RTables and returning an RTable, to ones returning a RTabResult.
				The RTabResults includes apart from the resulting RTable, also the number of rows affected by the operation in question (as a log).
20171108>>> (Completion)


<<<20170907
			Implement CSV reading with options (various delimiter characters and header/noHeader) (in Base.hs)
			Impement projection by index over CSV files (in Base.hs)
20170907>>> (Completion)

GIT (master)
	commit c15a14920764e7ca4f0f0e98d457a4ae9767dcb0
	Author: Karagiannidis Nikolaos <nkarag@central-domain.root.ote.gr>
	Date:   Tue Sep 5 17:59:04 2017 +0300

    Julius works top-to-bottom. Outer joins, as well as Difference and Intersection have been fixed to work, due to problem with Null logic (equality comparison with Null, always returns False)
		    
<<<20170810		Start a new branch and experiment with 
					*a top-to-bottom (left-to-right) Julius syntax as well as --> DONE
					*a new syntax that allows to name intermediate results in a chain of ETLMappings and refer to this name as a table (Tab name) at a later ETLMapping. --> DONE
					*update readme.md --> DONE
					* merge git branch to master --> DONE

20170905>>> (Completion)

<<<20170825		Test Full Outer Join
20170828>>> (Completion)

<<<20170811		Problem with Minus and Julius (the left table cannot be a previous ETL mapping, it must always be an explicit RTable)
				Test MinusP
20170828>>> (Completion)

<<<20170801		Implement function:	
					evalJulius :: ETLMappingExpr -> ETLMapping 
					Finish Testing
20170825>>> (Completion)

<<<20170825		- Implement "Null Logic" for RDataTypes. Create an Eq Instance of RDataType and make == and /= comparison with Null to return always False.
				- Then create separate isNull :: RDataType -> Bool and isNotNull = not.isNull functions to be used whenever you need to make such comparisons
				- Rengineer code where == or /= comparison with Null appears and change it to use isNull or isNotNull
20170825>>> (Completion)


<<<20170811		Left Join (OK) and Right Join (OK) dont work correctly (also Diff (OK) and Intersection (OK) due to Null Logic)
				See the correct one:

				with rtab
				as (
				    select dummy, rownum x
				    from dual
				    connect by level < 3
				),
				ltab
				as(
				select dummy, rownum + 1 as y
				    from dual
				    connect by level < 4
				)
				select *
				from ltab left join rtab on (x = y)

				DUMMY Y                                      DUMMY_1 X                                      
				X     2                                      X       2                                      
				X     3                                                                                     
				X     4                                                                                     
20170825>>> (Completion)

<<<20170808		Implement full outer join, simply as: (right join) union (left join)
20170808>>> (Completion)

<<<20170630		create an Embedded DSL for easy ETL over CSV files  -> Julius!
20170801>>> (Completion)

<<<20170505		Implement Left and Right Outer Joins
20170509>>> (Completion)

<<<20170505		csvToRTable must include "empty column logic" i.e., turn ",," "^," ",$" to a Null RDataType in the corresponding RTuple
20170509>>> (Completion)

<<<20170328		Run some tests to test relational operations (filter OK, projection OK, join OK, union OK, intersection OK, difference OK) and 
				ETLMappings : 
					add new columns (RMap1x1) OK, 
					change existing column names (RMap1x1) OK, 
					value transformations (RMap1x1) OK, 
					RMapNx1 OK
					RMap1xN OK
					RMapNxM OK
20170421>>> (Completion)


<<<20170315		implement the ETLMapping concept and the function runETLmapping - DONE
							runUnaryETLOperation - DONE
							runBinaryETLOperation - DONE
							runUnaryROperation - DONE
							runBinaryROperation - DONE
							runInnerJoin - DONE
20170328>>> (Completion)

<<<20170313	Implement  concept of fixed column-order per RTuple with a HashMap ColOrder ColumnName, where type ColOrder = Int. This triggers changes in the following:
				- RTupleMData
				- ColumnInfo
				- createRTableMData
				- csvToRTable
				- RTableToCSV
20170314>>> (Completion)

<<<20170307	type RTupleMData =   HM.HashMap ColumnName ColumnInfo --> it does not keep the column order specified when we call RTable.createRTableMData, we need to change HashMap to a List, 				Also fix bug in rtableToCSV so as in the list [(ColumnInfo, RDataType)] the columns correpsonf to the approproate RDataTypes 
			
20170307>>> (Completion)

<<<20170306	Change RDate to hold each date component separately (year, month, day, hour, min, sec) and make it an instance of Eq and Ord, so that you can order RDates 
20170306>>> (Completion)

<<<20170303	Change rtableToCSV to also write the Header in the first line, based on table metadata
20170306>>> (Completion)
